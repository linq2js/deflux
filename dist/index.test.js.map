{"version":3,"sources":["../index.test.js"],"names":["Adapter","React","mount","configure","create","update","store","component","withProp","withMiddleware","withReducer","fromProp","fromStore","adapter","describe","test","testStore","counter","expect","getState","toEqual","x","doubleCounter","rootStore","value","done","updateCounter","state","dispatch","updateValue","setTimeout","undefined","middlewareCallTimes","updateAction","next","action","payload","toBe","increase","by","decrease","subscriptionCalls","unsubscribe","subscribe","nextState","reducer","counter1","counter2","IdStore","TextStore","TodoStore","AddTodoAction","text","id","ids","texts","TestComponent","props","renderResult","html","HOC","extension1Called","render","withExtension1","options","extension2Called","withExtension2","comp","changeText","instance"],"mappings":"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","file":"index.test.js","sourcesContent":["import Adapter from 'enzyme-adapter-react-16';\r\nimport React from 'react';\r\nimport { mount, configure } from 'enzyme';\r\nimport {\r\n  create,\r\n  update,\r\n  store,\r\n  component,\r\n  withProp,\r\n  withMiddleware,\r\n  withReducer,\r\n  fromProp,\r\n  fromStore\r\n} from './index';\r\n\r\nconfigure({\r\n  adapter: new Adapter()\r\n});\r\n\r\ndescribe('store', () => {\r\n  test('store: initialState', () => {\r\n    const testStore = create(store({ counter: 1 }));\r\n    expect(testStore.getState()).toEqual({ counter: 1 });\r\n  });\r\n\r\n  test('store: computed prop', () => {\r\n    const testStore = create(\r\n      store({ counter: 1 }),\r\n      withProp('doubleCounter', fromProp('counter'), x => x * 2)\r\n    );\r\n    expect(testStore.getState()).toEqual({ counter: 1, doubleCounter: 2 });\r\n  });\r\n\r\n  test('store: linked prop', () => {\r\n    const rootStore = create(store({ value: 1 }));\r\n    const testStore = create(\r\n      store({}),\r\n      withProp('counter', fromStore(rootStore), 'value')\r\n    );\r\n    expect(testStore.getState()).toEqual({ counter: 1 });\r\n  });\r\n\r\n  test('store: update linked prop', done => {\r\n    const rootStore = create(store({ value: 1 }));\r\n    const testStore = create(\r\n      store({}),\r\n      withProp('counter', fromStore(rootStore), 'value')\r\n    );\r\n    const updateCounter = () => state => ({ counter: 5 });\r\n\r\n    // update child store will affect to parent store immediately\r\n    testStore.dispatch(updateCounter);\r\n\r\n    expect(testStore.getState()).toEqual({ counter: 5 });\r\n    expect(rootStore.getState()).toEqual({ value: 5 });\r\n\r\n    const updateValue = () => state => ({ value: 10 });\r\n\r\n    rootStore.dispatch(updateValue);\r\n\r\n    // update parent store will affect to child stores lazyly\r\n    setTimeout(() => {\r\n      expect(testStore.getState()).toEqual({ counter: 10 });\r\n      expect(rootStore.getState()).toEqual({ value: 10 });\r\n\r\n      done();\r\n    }, 0);\r\n  });\r\n\r\n  test('store: update linked prop', () => {\r\n    const rootStore = create(store({ value: 1 }));\r\n    const testStore = create(store({}));\r\n    expect(testStore.getState()).toEqual({ counter: undefined });\r\n    update(testStore, withProp('counter', fromStore(rootStore), 'value'));\r\n    expect(testStore.getState()).toEqual({ counter: 1 });\r\n  });\r\n\r\n  test('store: middleware should be called', () => {\r\n    let middlewareCallTimes = 0;\r\n    const updateAction = () => 100;\r\n    const testStore = create(\r\n      store({}),\r\n      withMiddleware(store => next => (action, payload) => {\r\n        expect(action).toBe(updateAction);\r\n        expect(payload).toBe(100);\r\n        middlewareCallTimes++;\r\n        return next(action, payload);\r\n      }),\r\n      withMiddleware(store => next => (action, payload) => {\r\n        expect(action).toBe(updateAction);\r\n        expect(payload).toBe(100);\r\n        middlewareCallTimes++;\r\n      })\r\n    );\r\n\r\n    testStore.dispatch(updateAction);\r\n\r\n    expect(middlewareCallTimes).toBe(2);\r\n  });\r\n\r\n  test('store: reducer should be called', () => {\r\n    const increase = by => by;\r\n    const decrease = by => by;\r\n    let subscriptionCalls = 0;\r\n    let unsubscribe;\r\n    const testStore = create(\r\n      store(0),\r\n      withReducer(\r\n        (state, action, by = 1) =>\r\n          action === increase\r\n            ? state + by\r\n            : action === decrease\r\n            ? state - by\r\n            : state\r\n      )\r\n    );\r\n    unsubscribe = testStore.subscribe(nextState => {\r\n      expect(nextState).toBe(10);\r\n      subscriptionCalls++;\r\n    });\r\n    testStore.dispatch(increase, 10);\r\n    unsubscribe();\r\n    expect(testStore.getState()).toBe(10);\r\n\r\n    unsubscribe = testStore.subscribe(nextState => {\r\n      expect(nextState).toBe(6);\r\n      subscriptionCalls++;\r\n    });\r\n    testStore.dispatch(decrease, 4);\r\n    unsubscribe();\r\n    expect(testStore.getState()).toBe(6);\r\n    expect(subscriptionCalls).toBe(2);\r\n  });\r\n\r\n  test('store: withReducer(propName, reducer)', () => {\r\n    const increase = by => by;\r\n    const decrease = by => by;\r\n    const reducer = (state, action, payload) => {\r\n      if (action === increase) {\r\n        return state + payload;\r\n      }\r\n      if (action === decrease) {\r\n        return state - payload;\r\n      }\r\n      return state;\r\n    };\r\n\r\n    const testStore = create(\r\n      store({\r\n        counter1: 1,\r\n        counter2: 2\r\n      }),\r\n      withReducer('counter1', reducer),\r\n      withReducer('counter2', reducer)\r\n    );\r\n\r\n    testStore.dispatch(increase, 2);\r\n    expect(testStore.getState()).toEqual({\r\n      counter1: 3,\r\n      counter2: 4\r\n    });\r\n  });\r\n\r\n  test(\"store: parent store's props should be updated once linked props updated\", done => {\r\n    const IdStore = create(store([]));\r\n    const TextStore = create(store({}));\r\n    const TodoStore = create(\r\n      store(),\r\n      // link ids to IdStore, it holds id list\r\n      withProp('ids', fromStore(IdStore)),\r\n      // link texts to TextStore, it holds text list\r\n      withProp('texts', fromStore(TextStore))\r\n    );\r\n    const AddTodoAction = text => state => {\r\n      const id = 1;\r\n      return {\r\n        ...state,\r\n        // append id to id list\r\n        ids: [...state.ids, id],\r\n        // set new text to texts hash\r\n        texts: {\r\n          ...state.texts,\r\n          [id]: text\r\n        }\r\n      };\r\n    };\r\n    TodoStore.dispatch(AddTodoAction, 'Test Todo');\r\n    setTimeout(() => {\r\n      expect(IdStore.getState()).toEqual([1]);\r\n      done();\r\n    }, 0);\r\n  });\r\n});\r\n\r\ndescribe('component', () => {\r\n  test('component: should return component if default component is specified', () => {\r\n    const TestComponent = create(\r\n      component(props => <div>{props.text}</div>),\r\n      withProp('text', fromProp('text'))\r\n    );\r\n    const renderResult = mount(<TestComponent text=\"Hello World\" />);\r\n    expect(renderResult.html()).toBe('<div>Hello World</div>');\r\n  });\r\n\r\n  test('component: should return hoc if no default component is specified', () => {\r\n    const HOC = create(component(), withProp('text', fromProp('text')));\r\n    expect(typeof HOC).toBe('function');\r\n    expect(typeof HOC()).toBe('function');\r\n  });\r\n\r\n  test('component: understand normal function as hoc', () => {\r\n    let extension1Called = false;\r\n    const render = props => 'test component';\r\n    const withExtension1 = options => component => {\r\n      expect(options).toBe(1);\r\n      expect(typeof component).toBe('function');\r\n      extension1Called = true;\r\n      return component;\r\n    };\r\n    let extension2Called = false;\r\n    const withExtension2 = options => component => {\r\n      expect(options).toBe(2);\r\n      expect(typeof component).toBe('function');\r\n      extension2Called = true;\r\n      return component;\r\n    };\r\n    const comp = create(\r\n      component(render),\r\n      withExtension1(1),\r\n      withExtension2(2)\r\n    );\r\n\r\n    expect(extension1Called).toBe(true);\r\n    expect(extension2Called).toBe(true);\r\n  });\r\n\r\n  test('component: should retrieve prop value from store', () => {\r\n    const testStore = create(store('Hello World'));\r\n    const TestComponent = create(\r\n      component(props => <div>{props.text}</div>),\r\n      withProp('text', fromStore(testStore))\r\n    );\r\n    const renderResult = mount(<TestComponent />);\r\n    expect(renderResult.html()).toBe('<div>Hello World</div>');\r\n  });\r\n\r\n  test('component: should re-render if store changed', () => {\r\n    const testStore = create(store('Hello'));\r\n    const changeText = () => state => 'World';\r\n    const TestComponent = create(\r\n      component(props => <div>{props.text}</div>),\r\n      withProp('text', fromStore(testStore))\r\n    );\r\n    const instance = mount(<TestComponent />);\r\n\r\n    expect(instance.html()).toBe('<div>Hello</div>');\r\n\r\n    testStore.dispatch(changeText);\r\n    expect(instance.html()).toBe('<div>World</div>');\r\n  });\r\n});\r\n"]}